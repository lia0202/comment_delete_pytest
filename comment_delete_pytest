=========================================== FAILURES ============================================
_________________________________________ test_comment __________________________________________

user_client = <django.test.client.Client object at 0x111a1c950>
another_user_client = <django.test.client.Client object at 0x111aca850>
unlogged_client = <django.test.client.Client object at 0x111b5f490>
post_with_published_location = <Post: Post object (2)>, another_user = <User: flee>
post_comment_context_form_item = KeyVal(key='form', val=<CommentForm bound=False, valid=False, fields=(text)>)
CommentModel = <class 'blog.models.Comment'>
CommentModelAdapter = <class 'adapters.comment.CommentModelAdapter.<locals>._CommentModelAdapter'>

    @pytest.mark.django_db(transaction=True)
    def test_comment(
            user_client: django.test.Client,
            another_user_client: django.test.Client,
            unlogged_client: django.test.Client,
            post_with_published_location: Any,
            another_user: Model,
            post_comment_context_form_item: Tuple[str, BaseForm],
            CommentModel: Type[Model],
            CommentModelAdapter: CommentModelAdapterT):
        post_with_published_location.author = another_user
        post_with_published_location.save()
        _, ctx_form = post_comment_context_form_item
        a_post_get_response = get_a_post_get_response_safely(
            user_client, post_with_published_location.id)
    
        # create comments
        creation_tester = CreateCommentFormTester(
            a_post_get_response, CommentModel, user_client,
            another_user_client, unlogged_client, item_adapter=None,
            ModelAdapter=CommentModelAdapter)
    
        Form: Type[BaseForm] = type(ctx_form)
    
        item_ix_start: int = random.randint(1000000, 2000000)
        item_ix_cnt: int = 5
        rand_range = list(range(item_ix_start, item_ix_start + item_ix_cnt))
        forms_data = []
        for i in rand_range:
            forms_data.append({'text': f'Test create comment {i} text'})
    
        forms_to_create = creation_tester.init_create_item_forms(
            Form, Model=CommentModel, ModelAdapter=CommentModelAdapter,
            forms_unadapted_data=forms_data
        )
        try:
            creation_tester.test_unlogged_cannot_create(
                form=forms_to_create[0], qs=CommentModel.objects.all())
        except FormValidationException as e:
            raise AssertionError(
                f'Убедитесь, что для валидации {creation_tester.of_which_form} '
                'достаточно заполнить следующие поля: '
                f'{list(forms_to_create[0].data.keys())}. '
                f'При валидации формы возникли следующие ошибки: {e}'
            )
    
        response_on_created, created_items = creation_tester.test_create_several(
            forms_to_create[1:], qs=CommentModel.objects.all())
        content = response_on_created.content.decode(encoding='utf8')
        creation_tester.test_creation_response(content, created_items)
    
        index_content = user_client.get('/').content.decode('utf-8')
        if f'({len(created_items)})' not in index_content:
            raise AssertionError(
                'Убедитесь, что у публикаций на главной странице '
                'отображается количество комментариев. '
                'Оно должно быть указано в круглых скобках.'
            )
    
        created_item_adapters = [CommentModelAdapter(i) for i in created_items]
    
        # edit comments
        post_url = f'/posts/{post_with_published_location.id}/'
>       edit_url, del_url = find_edit_and_delete_urls(
            created_item_adapters, response_on_created,
            urls_start_with=KeyVal(
                key=post_url.replace(
                    f'/{post_with_published_location.id}/',
                    '/<post_id>/'
                ),
                val=post_url
            ), user_client=user_client)

tests/test_comment.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/form/comment/find_urls.py:64: in find_edit_and_delete_urls
    assert not get_page_context_form(
tests/conftest.py:295: in get_page_context_form
    return _testget_context_item_by_class(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

context = None, cls = <class 'django.forms.forms.BaseForm'>, err_msg = '', inside_iter = False

    def _testget_context_item_by_class(
            context, cls: type, err_msg: str,
            inside_iter: bool = False
    ) -> KeyVal:
        """If `err_msg` is not empty, empty return value will
        produce an AssertionError with the `err_msg` error message"""
    
        def is_a_match(val: Any):
            if inside_iter:
                try:
                    return isinstance(iter(val).__next__(), cls)
                except Exception:
                    return False
            else:
                return isinstance(val, cls)
    
        matched_keyval: KeyVal = KeyVal(key=None, val=None)
        matched_keyvals: List[KeyVal] = []
>       for key, val in dict(context).items():
E       TypeError: 'NoneType' object is not iterable

tests/conftest.py:273: TypeError
==================================== short test summary info ====================================
FAILED tests/test_comment.py::test_comment - TypeError: 'NoneType' object is not iterable
